{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3c9c437e",
   "metadata": {},
   "source": [
    "## Exercise 5\n",
    "Vi ska ta fram ett neuralt nätverk som kan klassificera handskrivna siffror mellan 0-9.\n",
    "\n",
    "pip install tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6fd4bbd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vi har 60000 bilder i vårt träningsset och 10000 bilder i vårt testset.\n",
      "Varje bild är 28x28 pixlar.\n",
      "Varje bild har en etikett som syftar till vilken siffra mellan 0-9 som bilden visar.\n",
      "I bilden nedan ser ni ett exempel:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras.datasets import mnist\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "\n",
    "print(f'Vi har {x_train.shape[0]} bilder i vårt träningsset och {x_test.shape[0]} bilder i vårt testset.')\n",
    "print(f'Varje bild är {x_train.shape[1]}x{x_train.shape[2]} pixlar.')\n",
    "print(f'Varje bild har en etikett som syftar till vilken siffra mellan {y_train.min()}-{y_train.max()} som bilden visar.')\n",
    "print('I bilden nedan ser ni ett exempel:')\n",
    "# y_train är etiketterna för varje bild\n",
    "label = y_train[5]\n",
    "# X_train är bilderna (bilderna representeras som 28x28 pixlar (matriser))\n",
    "pixels = x_train[5]\n",
    "# Plot\n",
    "plt.title(f'Bilden visar {label}')\n",
    "plt.imshow(pixels, cmap='gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aba0fcb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "För att arbeta med classification, så måste vi göra om vårt target till en ny form - kategorisk.\n",
      "Detta innebär, att för varje bild så sätter vi ett värde på hur sannolikt det är att bilden visar den specifika siffran.\n",
      "Metodiken kallas \"One-hot-encoding\" och kan genomföras med funktionen keras.utils.to_categorical\n",
      "Detta innebär att:\n",
      "2 representeras som [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n",
      "Nedan syns ett bildexempel:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('För att arbeta med classification, så måste vi göra om vårt target till en ny form - kategorisk.')\n",
    "print('Detta innebär, att för varje bild så sätter vi ett värde på hur sannolikt det är att bilden visar den specifika siffran.')\n",
    "print('Metodiken kallas \"One-hot-encoding\" och kan genomföras med funktionen keras.utils.to_categorical')\n",
    "print('Detta innebär att:')\n",
    "print(f'{label} representeras som {list(to_categorical(label, num_classes=10))}')\n",
    "print('Nedan syns ett bildexempel:')\n",
    "plt.title(f'{list(to_categorical(label, num_classes=10))}')\n",
    "plt.imshow(pixels, cmap='gray')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ad30e43",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = to_categorical(y_train, num_classes=10)\n",
    "y_test = to_categorical(y_test, num_classes=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b0cbe22",
   "metadata": {},
   "source": [
    "## Neuralt Nätverk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7b400c7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "750/750 [==============================] - 2s 2ms/step - loss: 0.6877 - val_loss: 0.3926\n",
      "Epoch 2/10\n",
      "750/750 [==============================] - 2s 3ms/step - loss: 0.3727 - val_loss: 0.3288\n",
      "Epoch 3/10\n",
      "750/750 [==============================] - 2s 3ms/step - loss: 0.3312 - val_loss: 0.3177\n",
      "Epoch 4/10\n",
      "750/750 [==============================] - 2s 3ms/step - loss: 0.3038 - val_loss: 0.2890\n",
      "Epoch 5/10\n",
      "750/750 [==============================] - 2s 3ms/step - loss: 0.2987 - val_loss: 0.2907\n",
      "Epoch 6/10\n",
      "750/750 [==============================] - 2s 2ms/step - loss: 0.2982 - val_loss: 0.3011\n",
      "Epoch 7/10\n",
      "750/750 [==============================] - 2s 2ms/step - loss: 0.2832 - val_loss: 0.2599\n",
      "Epoch 8/10\n",
      "750/750 [==============================] - 2s 2ms/step - loss: 0.2652 - val_loss: 0.2623\n",
      "Epoch 9/10\n",
      "750/750 [==============================] - 2s 3ms/step - loss: 0.2598 - val_loss: 0.2437\n",
      "Epoch 10/10\n",
      "750/750 [==============================] - 2s 2ms/step - loss: 0.2524 - val_loss: 0.2400\n",
      "Epoch 1/10\n",
      "750/750 [==============================] - 14s 18ms/step - loss: 0.5355 - val_loss: 0.1373\n",
      "Epoch 2/10\n",
      "750/750 [==============================] - 14s 19ms/step - loss: 0.0854 - val_loss: 0.1082\n",
      "Epoch 3/10\n",
      "750/750 [==============================] - 14s 19ms/step - loss: 0.0526 - val_loss: 0.0898\n",
      "Epoch 4/10\n",
      "750/750 [==============================] - 14s 19ms/step - loss: 0.0366 - val_loss: 0.0900\n",
      "Epoch 5/10\n",
      "750/750 [==============================] - 14s 19ms/step - loss: 0.0346 - val_loss: 0.1066\n",
      "Epoch 6/10\n",
      "750/750 [==============================] - 15s 20ms/step - loss: 0.0272 - val_loss: 0.1283\n",
      "Epoch 7/10\n",
      "750/750 [==============================] - 15s 20ms/step - loss: 0.0307 - val_loss: 0.0966\n",
      "Epoch 8/10\n",
      "750/750 [==============================] - 15s 19ms/step - loss: 0.0199 - val_loss: 0.1192\n",
      "Epoch 9/10\n",
      "750/750 [==============================] - 15s 20ms/step - loss: 0.0208 - val_loss: 0.1222\n",
      "Epoch 10/10\n",
      "750/750 [==============================] - 15s 20ms/step - loss: 0.0226 - val_loss: 0.1160\n",
      "313/313 [==============================] - 0s 641us/step\n",
      "313/313 [==============================] - 2s 5ms/step\n"
     ]
    }
   ],
   "source": [
    "from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\n",
    "from keras.models import Sequential\n",
    "from keras.optimizers import Adam\n",
    "\n",
    "# Ett enkelt neuralt nätverk\n",
    "model = Sequential()\n",
    "model.add(Flatten(input_shape=(28,28))) #input layer\n",
    "model.add(Dense(87, activation='sigmoid')) #hidden\n",
    "model.add(Dense(10, activation='sigmoid')) #output\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam')\n",
    "\n",
    "model.fit(x_train, y_train, epochs=10, validation_split=0.2, batch_size=64)\n",
    "\n",
    "# Ett CNN\n",
    "model_cnn = Sequential()\n",
    "model_cnn.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n",
    "model_cnn.add(MaxPooling2D((2,2)))\n",
    "model_cnn.add(Flatten())\n",
    "model_cnn.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\n",
    "model_cnn.add(Dense(10, activation='softmax'))\n",
    "\n",
    "model_cnn.compile(loss='categorical_crossentropy', optimizer='adam')\n",
    "\n",
    "model_cnn.fit(x_train, y_train, epochs=10, validation_split=0.2, batch_size=64)\n",
    "\n",
    "predictions = model.predict(x_test)\n",
    "predictions_cnn = model_cnn.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "17b1b816",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAEICAYAAACZA4KlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAQ10lEQVR4nO3df6xU9ZnH8fcj/haIXIlIEbRVG60GcEPQhO6GtdYoWX/b+rNhN7JXjaxWG1lCsymJ7q4rW7SbdMHbSABbcZu0VP8wbgkhUWlaBSO/SlTqDwrecEVWBSoi8OwfczDjdeY7c+fMzBnu83klk3vnPPOd88xwP5yZOXPO19wdERn8jiq6ARFpD4VdJAiFXSQIhV0kCIVdJAiFXSQIhV0kiDBhNzM3s71m9q9F9yKDk5ndbmZ7sr+1s4vup78wYc9McPcfHr5iZhPNbK2Z/SX7ObHeOzKzLjNbnv0H8q6Z3TKAsWZm/2FmH2SXR8zMBjD+lmyde83sN2bWNYCxeswDe8wzzWyNmX1qZotTt3X3J9x9aL333W7Rwv45MzsWeAb4OTACWAI8ky2vx0+B/cAo4FZggZmdX+fYbuAaYAIwHvg74I46+z4feBz4XrbuvwD/XedYPeaBP+b3gIeARXXevnO5e4gL4MDZZdcvA7YDVrZsK3B5Hfd1EqU/+q+XLXsSeLjOXn4HdJddvx34fZ1j/w14quz6WVkvw+oYq8c8gMfc734eAhY38rfWKZewW3bgfGC9Z/86mfXZ8lq+Dhx09zfKlq2rc+zhda9rxlh3/xNZCOscq8dc/2MeVCKHfSjwUb9lHwHDWjy20viPgKF1voctqu+Ij3lQiRz2PcDwfsuGA7tbPLbS+OHAnn5bn1asW495YGMHlchh3wSM77dlGZ8tr+UN4GgzO6ds2YQ6xx5e94RmjDWzrwHHZT3VM1aPuf7HPLgU/aFBuy58+QO6Y4F3gXsp/eHMzK4fW+f9PQ0so/TB1RRKLw3Pr3PsncBmYAzwFUp/eHfWOfZ84GPgr7N1/xx4us6xeswDf8xHA8cD/07pA8njgaMH8rfWKZfCG2jbA63wDwBcCKwFPgFeBS4sq90KbErcXxfwG2AvpU93bymrjaP08nFclbEGPALsyi6P8MVPizcBtybWfUu2zr2Udit1ldUWAgsTY/WYB/aY52Z/O+WXuanH3Klht6y5Qc/M9gGfAv/l7v9SdD8y+JjZPwCPUtr6f8Pd3yq4pS8IE3aR6CJ/QCcSisIuEsTR7VyZmek9g0iLuXvFLyrl2rKb2eVm9rqZbTGz2XnuS0Raq+EP6MxsCKUvNXwb2Aa8Atzs7n9MjNGWXaTFWrFlnwxscfe33H0/pS9cXJ3j/kSkhfKEfQzw57Lr27JlX2Bm3dnB/2tyrEtEcsrzAV2llwpfepnu7j1AD+hlvEiR8mzZtwFjy66fTumsHiLSgfKE/RXgHDP7anaKn5uAZ5vTlog0W8Mv4939gJnNBP4XGAIscvd4hw2KHCHa+t14vWcXab2WfKlGRI4cCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBANz88OYGbvALuBg8ABd5/UjKZEpPlyhT3zt+6+swn3IyItpJfxIkHkDbsDvzWztWbWXekGZtZtZmvMbE3OdYlIDubujQ82+4q7v2dmpwIrgH9y9xcSt298ZSJSF3e3Sstzbdnd/b3sZx+wHJic5/5EpHUaDruZnWRmww7/DlwGbGxWYyLSXHk+jR8FLDezw/fzlLs/35SuRKTpcr1nH/DK9J5dpOVa8p5dRI4cCrtIEAq7SBAKu0gQCrtIEM04EEaOYGeffXayPnLkyGT92muvTdanTp1atXbo0KHk2IULFybrq1evTta3bNmSrEejLbtIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEDrqbRC44IILqtZmzpyZHHvdddcl67X2sxfpwIEDyfrrr79etfbSSy8lx957773J+v79+5P1IumoN5HgFHaRIBR2kSAUdpEgFHaRIBR2kSAUdpEgdDx7Bxg/fnyyfvfddyfrN954Y9Xa8OHDG+rpsO3btyfrL774YrL+9ttvV63NmjUrOXbt2rXJ+uTJ6TlJurq6qtamTZuWHLtu3bpkvdax9p1IW3aRIBR2kSAUdpEgFHaRIBR2kSAUdpEgFHaRIHQ8exs8/vjjyXqtc6/nOaZ85cqVyfqGDRuS9Tlz5iTr+/btG3BPh61atSpZv+uuu5L1RYsWJesTJ06sWtuxY0dy7Lhx45L10047LVl///33k/VWavh4djNbZGZ9ZraxbFmXma0wszeznyOa2ayINF89L+MXA5f3WzYbWOnu5wArs+si0sFqht3dXwB29Vt8NbAk+30JcE1z2xKRZmv0u/Gj3L0XwN17zezUajc0s26gu8H1iEiTtPxAGHfvAXog7gd0Ip2g0V1vO8xsNED2s695LYlIKzQa9meB6dnv04FnmtOOiLRKzZfxZrYMmAqMNLNtwI+Ah4FfmtntwFbgO61sshMcf/zxVWu1jsueMWNGsm5Wcbfo52rts12wYEHV2rx585Jj9+7dm6y30imnnJKsDxkyJFmfO3dusv78889XrZ1xxhnJsYNRzbC7+81VSt9qci8i0kL6uqxIEAq7SBAKu0gQCrtIEAq7SBA6lXSdpk6dWrX2wAMPJMfW2rVW63TN119/fbL+8ssvJ+utVGv32NixY6vWli5dmhz73HPPJesjRjR+sGWtf5Mnn3wyWf/www8bXndRtGUXCUJhFwlCYRcJQmEXCUJhFwlCYRcJQmEXCUL72euU2p988ODBXPd94MCBZP2iiy5K1m+44YaqtXPPPbehng775JNPkvXzzjuv4frOnTuTY0eNGpWs51HrVNIPPfRQsv7ZZ581s5220JZdJAiFXSQIhV0kCIVdJAiFXSQIhV0kCIVdJAhN2VynE044oWrtqaeeSo699NJLk/UTTzwxWT/qqPT/yXn+DWt9R6DW8epFOnToULK+fPnyqrV77rknOba3t7ehnjpBw1M2i8jgoLCLBKGwiwShsIsEobCLBKGwiwShsIsEof3sbXDyyScn67Nnz07Wp0yZkqx/8MEHVWtbt25Njj3uuOOS9QkTJiTrkydPTtZbaeHChcn6nDlzqtaOxPO+16vh/exmtsjM+sxsY9myuWa23cxeyy7TmtmsiDRfPS/jFwOXV1j+qLtPzC7pqTtEpHA1w+7uLwC72tCLiLRQng/oZprZ+uxlftVJt8ys28zWmNmaHOsSkZwaDfsC4CxgItAL/LjaDd29x90nufukBtclIk3QUNjdfYe7H3T3Q8DPgOI+khWRujQUdjMbXXb1WmBjtduKSGeouZ/dzJYBU4GRwA7gR9n1iYAD7wB3uHvNA4Cj7mc/ktWaQ/22225r+L53796drN9///3J+uLFi5P1vOfzP1JV289ec5IId7+5wuIncnckIm2lr8uKBKGwiwShsIsEobCLBKGwiwShKZuDmzVrVrJ+0003tWzdd955Z7K+bNmylq07Im3ZRYJQ2EWCUNhFglDYRYJQ2EWCUNhFglDYRYLQqaQHuRkzZiTr8+fPT9aHDh2aa/2bNm2qWps0KX3yok8//TTXuqPSlM0iwSnsIkEo7CJBKOwiQSjsIkEo7CJBKOwiQWg/+yCQmjZ5xYoVybHDhg3Lte49e/Yk61dccUXV2urVq3OtWyrTfnaR4BR2kSAUdpEgFHaRIBR2kSAUdpEgFHaRIGqeN97MxgJLgdOAQ0CPu//EzLqA/wHOpDRt83fd/f9a16pUc+WVV1at5d2Pvnfv3mT9qquuSta1L71z1LNlPwD8wN3PAy4G7jazbwCzgZXufg6wMrsuIh2qZtjdvdfdX81+3w1sBsYAVwNLspstAa5pUY8i0gQDes9uZmcCFwJ/AEa5ey+U/kMATm16dyLSNHXP9WZmQ4FfAd9394/NKn79ttK4bqC7sfZEpFnq2rKb2TGUgv4Ld/91tniHmY3O6qOBvkpj3b3H3Se5e/rsgiLSUjXDbqVN+BPAZncvPxXps8D07PfpwDPNb09EmqXmIa5m9k3gRWADpV1vAHMovW//JTAO2Ap8x9131bgvHeLagFq7z3bu3Fm1dswxx+Rad09PT7Jea9plab9qh7jWfM/u7i8B1d6gfytPUyLSPvoGnUgQCrtIEAq7SBAKu0gQCrtIEAq7SBA6lXQHqDUt8ubNm5P1MWPGNLzu9evXJ+sXX3xxsr5v376G1y2toVNJiwSnsIsEobCLBKGwiwShsIsEobCLBKGwiwRR92mppHUuueSSZP30009P1vN8V+K+++5L1rUfffDQll0kCIVdJAiFXSQIhV0kCIVdJAiFXSQIhV0kCO1n7wAPPvhgsp5nP/q8efOS9VWrVjV833Jk0ZZdJAiFXSQIhV0kCIVdJAiFXSQIhV0kCIVdJIia+9nNbCywFDiN0vzsPe7+EzObC/wj8H520znu/lyrGh3Murq6knWzajNml/T19VWtPfbYY420JINQPV+qOQD8wN1fNbNhwFozW5HVHnX3/2xdeyLSLDXD7u69QG/2+24z2ww0PgWJiBRiQO/ZzexM4ELgD9mimWa23swWmdmIKmO6zWyNma3J16qI5FF32M1sKPAr4Pvu/jGwADgLmEhpy//jSuPcvcfdJ7n7pPztikij6gq7mR1DKei/cPdfA7j7Dnc/6O6HgJ8Bk1vXpojkVTPsVvoo+Algs7vPL1s+uuxm1wIbm9+eiDRLPZ/GTwG+B2wws9eyZXOAm81sIuDAO8AdLegvhPnz5+eqpw6R7e3tbagnGXzq+TT+JaDSjl7tUxc5gugbdCJBKOwiQSjsIkEo7CJBKOwiQSjsIkFYntMUD3hlZu1bmUhQ7l7xmGht2UWCUNhFglDYRYJQ2EWCUNhFglDYRYJQ2EWCaPeUzTuBd8uuj8yWdaJO7a1T+wL11qhm9nZGtUJbv1TzpZWbrenUc9N1am+d2heot0a1qze9jBcJQmEXCaLosPcUvP6UTu2tU/sC9daotvRW6Ht2EWmforfsItImCrtIEIWE3cwuN7PXzWyLmc0uoodqzOwdM9tgZq8VPT9dNoden5ltLFvWZWYrzOzN7GfFOfYK6m2umW3PnrvXzGxaQb2NNbNVZrbZzDaZ2b3Z8kKfu0RfbXne2v6e3cyGAG8A3wa2Aa8AN7v7H9vaSBVm9g4wyd0L/wKGmf0NsAdY6u4XZMseAXa5+8PZf5Qj3P2fO6S3ucCeoqfxzmYrGl0+zThwDfD3FPjcJfr6Lm143orYsk8Gtrj7W+6+H3gauLqAPjqeu78A7Oq3+GpgSfb7Ekp/LG1XpbeO4O697v5q9vtu4PA044U+d4m+2qKIsI8B/lx2fRudNd+7A781s7Vm1l10MxWMcvdeKP3xAKcW3E9/Nafxbqd+04x3zHPXyPTneRUR9krnx+qk/X9T3P2vgCuAu7OXq1KfuqbxbpcK04x3hEanP8+riLBvA8aWXT8deK+APipy9/eyn33AcjpvKuodh2fQzX72FdzP5zppGu9K04zTAc9dkdOfFxH2V4BzzOyrZnYscBPwbAF9fImZnZR9cIKZnQRcRudNRf0sMD37fTrwTIG9fEGnTONdbZpxCn7uCp/+3N3bfgGmUfpE/k/AD4vooUpfXwPWZZdNRfcGLKP0su4zSq+IbgdOAVYCb2Y/uzqotyeBDcB6SsEaXVBv36T01nA98Fp2mVb0c5foqy3Pm74uKxKEvkEnEoTCLhKEwi4ShMIuEoTCLhKEwi4ShMIuEsT/A+teIMKBx3EQAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Och vår prediktion för denna bild var:\n",
      "NN: [0.0032583526, 0.0024589617, 0.015415598, 0.01813174, 0.6317167, 0.019138958, 0.014697591, 0.8440936, 0.28575426, 0.9938208]\n",
      "CNN: [4.026854e-24, 2.979863e-29, 1.7856668e-15, 1.0962589e-23, 3.763041e-08, 1.3525514e-18, 1.9092302e-33, 6.81666e-13, 3.10762e-16, 0.99999994]\n"
     ]
    }
   ],
   "source": [
    "plt.title(f'{y_test[9]}')\n",
    "plt.imshow(x_test[9], cmap='gray')\n",
    "plt.show()\n",
    "\n",
    "print(f'Och vår prediktion för denna bild var:')\n",
    "print('NN:', list(predictions[9]))\n",
    "print('CNN:', list(predictions_cnn[9]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c1365159",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Vi gör om våra sannolikhets-prediktioner och y_test till faktiska siffror och plottar vad vi tror\n",
    "y_test_final = np.argmax(y_test, axis=1)\n",
    "predictions_cnn_final = np.argmax(predictions_cnn, axis=1)\n",
    "predictions_final = np.argmax(predictions, axis=1)\n",
    "\n",
    "plt.title(f'Vår prediktion (NN) är: {predictions_final[9]}. Vår prediktion (CNN) är: {predictions_cnn_final[9]}. Utfall: {y_test_final[9]}')\n",
    "plt.imshow(x_test[9], cmap='gray')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7f8461aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NN\n",
      "Accuracy: 0.9197\n",
      " \n",
      "Recall (for each class): [0.96836735 0.98590308 0.89728682 0.88613861 0.93380855 0.87443946\n",
      " 0.96555324 0.92801556 0.87679671 0.87016848]\n",
      " \n",
      "Precision (for each class): [0.95955511 0.96967071 0.93819656 0.91233435 0.8868472  0.90382387\n",
      " 0.91584158 0.92263056 0.87950566 0.8986694 ]\n",
      " \n",
      "F1-score (for each class): [0.96394109 0.97771953 0.91728579 0.89904571 0.90972222 0.88888889\n",
      " 0.94004065 0.92531523 0.8781491  0.88418933]\n",
      " \n",
      "------------------------------\n",
      "CNN\n",
      "Accuracy: 0.9781\n",
      " \n",
      "Recall (for each class): [0.98571429 0.98237885 0.97577519 0.99306931 0.97657841 0.98430493\n",
      " 0.9822547  0.96595331 0.97535934 0.96035679]\n",
      " \n",
      "Precision (for each class): [0.99382716 0.98935226 0.97672163 0.95889101 0.9805726  0.98320269\n",
      " 0.99052632 0.97640118 0.96153846 0.97094188]\n",
      " \n",
      "F1-score (for each class): [0.9897541  0.98585323 0.97624818 0.97568093 0.97857143 0.9837535\n",
      " 0.98637317 0.97114914 0.96839959 0.96562033]\n",
      " \n",
      "------------------------------\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score\n",
    "\n",
    "predictions_list = {'NN': predictions_final, 'CNN': predictions_cnn_final}\n",
    "\n",
    "for pred in predictions_list:\n",
    "    print(pred)\n",
    "    acc = accuracy_score(y_test_final, predictions_list[pred])\n",
    "    recall = recall_score(y_test_final, predictions_list[pred], average=None)\n",
    "    prec = precision_score(y_test_final, predictions_list[pred],average=None)\n",
    "    f1 = f1_score(y_test_final, predictions_list[pred], average=None)\n",
    "\n",
    "    print(f'Accuracy: {acc}')\n",
    "    print(' ')\n",
    "    print(f'Recall (for each class): {recall}')\n",
    "    print(' ')\n",
    "    print(f'Precision (for each class): {prec}')\n",
    "    print(' ')\n",
    "    print(f'F1-score (for each class): {f1}')\n",
    "    print(' ')\n",
    "    print('------------------------------')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "840fb961",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
